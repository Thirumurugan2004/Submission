// <auto-generated />
using System;
using BankCustomerAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankCustomerAPI.Migrations
{
    [DbContext(typeof(TrainingContext))]
    [Migration("20251030151826_ViewerAdded")]
    partial class ViewerAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("training")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("accountid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("accountnumber");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("accounttype");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branchid");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("closedon");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("currencycode");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("interestrate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<DateTime>("OpenedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("openedon");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("accounts", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.AccountOperator", b =>
                {
                    b.Property<long>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("operatorid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OperatorId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("accountid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<string>("OperatorType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("operatortype");

                    b.Property<long>("OperatorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("operatoruserid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.HasKey("OperatorId");

                    b.HasIndex("AccountId");

                    b.HasIndex("OperatorUserId");

                    b.ToTable("accountoperators", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bankid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("bankname");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("establisheddate");

                    b.Property<string>("HeadOfficeAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("headofficeaddress");

                    b.HasKey("BankId");

                    b.ToTable("banks", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("branchid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bankid");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("branchcode");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("branchname");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("ifsccode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.HasKey("BranchId");

                    b.HasIndex("BankId");

                    b.ToTable("branches", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("employeeid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bankid");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branchid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("designation");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("employeecode");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hiredate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedat");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("employees", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permissionid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("permissionname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedat");

                    b.HasKey("PermissionId");

                    b.ToTable("permissions", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rolename");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedat");

                    b.HasKey("RoleId");

                    b.ToTable("roles", "training");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(979),
                            Description = "Full access",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1041),
                            Description = "Limited access",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1042),
                            Description = "Read-only",
                            RoleName = "Viewer"
                        });
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleid")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permissionid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("assignedat");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("rolepermissions", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("transactionid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("accountid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<long>("PerformedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("performedby");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("referencenumber");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("remarks");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transactiondate");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("transactiontype");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PerformedBy");

                    b.ToTable("transactions", "training");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdat");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateofbirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsMinor")
                        .HasColumnType("bit")
                        .HasColumnName("isminor");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Salt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedat");

                    b.HasKey("UserId");

                    b.ToTable("users", "training");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1423),
                            Email = "admin@bank.com",
                            FullName = "Super Admin",
                            IsActive = true,
                            IsMinor = false,
                            PasswordHash = "JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk="
                        },
                        new
                        {
                            UserId = 2L,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1479),
                            Email = "manager@bank.com",
                            FullName = "Manager User",
                            IsActive = true,
                            IsMinor = false,
                            PasswordHash = "hmSFeWz6jXwM9xEWQCBbgwdkM1R1d1EdgfgDCumezqU="
                        },
                        new
                        {
                            UserId = 3L,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1489),
                            Email = "customer@bank.com",
                            FullName = "Customer User",
                            IsActive = true,
                            IsMinor = false,
                            PasswordHash = "sEHArrNbsPpKpmjKWpILWQGW/a+aAOuFLJt/TRI8xtY="
                        },
                        new
                        {
                            UserId = 4L,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1497),
                            Email = "guest@bank.com",
                            FullName = "Guest User",
                            IsActive = true,
                            IsMinor = false,
                            PasswordHash = "a5PMukFKwdCuHnfz+sVgx0imcB7WlGc1pJ1GM1FRjhY="
                        },
                        new
                        {
                            UserId = 5L,
                            CreatedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1504),
                            Email = "guest1@bank.com",
                            FullName = "Guest User1",
                            IsActive = true,
                            IsMinor = false,
                            PasswordHash = "a5PMukFKwdCuHnfz+sVgx0imcB7WlGc1pJ1GM1FRjhY="
                        });
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("assignedat");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles", "training");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1535)
                        },
                        new
                        {
                            UserId = 1L,
                            RoleId = 2,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1537)
                        },
                        new
                        {
                            UserId = 1L,
                            RoleId = 3,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1538)
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 1,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1539)
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 2,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1540)
                        },
                        new
                        {
                            UserId = 4L,
                            RoleId = 3,
                            AssignedAt = new DateTime(2025, 10, 30, 20, 48, 26, 112, DateTimeKind.Local).AddTicks(1541)
                        });
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Account", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.AccountOperator", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Account", "Account")
                        .WithMany("AccountOperators")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.User", "User")
                        .WithMany("AccountOperators")
                        .HasForeignKey("OperatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Branch", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Employee", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Bank", "Bank")
                        .WithMany("Employees")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.User", "User")
                        .WithOne()
                        .HasForeignKey("BankCustomerAPI.Entities.Training.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.RolePermission", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Transaction", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.User", "PerformedByUser")
                        .WithMany("Transactions")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.UserRole", b =>
                {
                    b.HasOne("BankCustomerAPI.Entities.Training.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankCustomerAPI.Entities.Training.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Account", b =>
                {
                    b.Navigation("AccountOperators");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Bank", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Branch", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BankCustomerAPI.Entities.Training.User", b =>
                {
                    b.Navigation("AccountOperators");

                    b.Navigation("Accounts");

                    b.Navigation("Transactions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
